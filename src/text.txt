body {
  -moz-osx-font-smoothing: grayscale;
  color: #fff;
  background-color: rgba(0, 0, 0, 0.767);
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}


import React, { useState } from "react";
import WalletExpensesComponent from "../WalletExpenses/WalletExpenses";
import ExpensesTable from "../ExpenseTable/ExpenseTable";
import "./Dashboard.css";
import LineBarChart from "../LineBarChart/LineBarChart";

function Dashboard() {
  const [walletBalance, setWalletBalance] = useState(
    localStorage.getItem("walletBalance")
      ? JSON.parse(localStorage.getItem("walletBalance"))
      : 5000
  );

  const [expenses, setExpenses] = useState(
    localStorage.getItem("expenses")?.length > 0
      ? JSON.parse(localStorage.getItem("expenses"))
      : []
  );
  const handleExpenseListUpdate = (expenses) => {
    setExpenses(expenses);
    const totalBalance =
      localStorage.getItem("totalBalance") - getTotalExpenses();

    setWalletBalance(totalBalance);
    localStorage.setItem("expenses", JSON.stringify(expenses));
  };

  const getTotalExpenses = () => {
    return expenses.reduce(
      (total, expense) => total + parseInt(expense.price, 10),
      0
    );
  };

  const categories = [
    "Food",
    "Entertainment",
    "Travel",
    "Shopping",
    "Grocery",
    "Others",
  ];

  return (
    <div className="dashboard-container">
      <h1>Expense Tracker</h1>
      <WalletExpensesComponent
        handleExpenseListUpdate={handleExpenseListUpdate}
        categories={categories}
        expenses={expenses}
        setExpenses={setExpenses}
        getTotalExpenses={getTotalExpenses}
        walletBalance={walletBalance}
        setWalletBalance={setWalletBalance}
      />
      {expenses.length > 0 && (
        <div className="dashboard-info-container">
          <ExpensesTable
            expenseData={expenses}
            handleExpenseListUpdate={handleExpenseListUpdate}
            categories={categories}
          />
          <LineBarChart data={expenses} categories={categories} />
        </div>
      )}
    </div>
  );
}

export default Dashboard;

.dashboard-info-container {
    width: 100%;
    display: flex;
    justify-content: space-between;
    margin: 40px;
  }

  import React, { useState } from "react";
import Modal from "react-modal";
import {
  FaUtensils,
  FaFilm,
  FaPlane,
  FaShoppingCart,
  FaShoppingBasket,
  FaEllipsisH,
  FaEdit,
  FaTrash,
} from "react-icons/fa";
import "./ExpenseTable.css";

Modal.setAppElement("#root");

const icons = {
  Food: <FaUtensils />,
  Entertainment: <FaFilm />,
  Travel: <FaPlane />,
  Shopping: <FaShoppingCart />,
  Grocery: <FaShoppingBasket />,
  Others: <FaEllipsisH />,
};

const modalStyle = {
  content: {
    top: "50%",
    left: "50%",
    right: "auto",
    bottom: "auto",
    marginRight: "-50%",
    transform: "translate(-50%, -50%)",
    width: "80%",
    maxWidth: "500px",
    background: "rgba(255, 255, 255, 0.6)",
    borderRadius: "10px",
    border: "border: 1px solid rgba(255, 255, 255, 0.18)",
    boxShadow: " 0 8px 12px rgba(0, 0, 0, 0.1)",
    backdropFilter: "blur(10px)",
  },
};

const TableWithPagination = ({
  expenseData: data,
  handleExpenseListUpdate,
  categories,
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currExpense, setCurrExpense] = useState({});
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;
  const pageCount = Math.ceil(data.length / itemsPerPage);

  const handleInputChange = (e, isExpense = true) => {
    const { name, value } = e.target;
    setCurrExpense((prevState) => ({ ...prevState, [name]: value }));
  };

  const getPageNumbers = () => {
    let start = Math.max(currentPage - 1, 1);
    let end = Math.min(start + 2, pageCount);
    if (currentPage > pageCount - 2) {
      start = Math.max(pageCount - 2, 1);
      end = pageCount;
    }
    return Array.from({ length: end - start + 1 }, (_, i) => start + i);
  };

  const paginate = (pageNumber) => setCurrentPage(pageNumber);
  const nextPage = () =>
    setCurrentPage((prev) => Math.min(prev + 1, pageCount));
  const prevPage = () => setCurrentPage((prev) => Math.max(prev - 1, 1));

  const currentItems = data.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const getCategoryIcon = (category) => {
    return icons[category] || <FaEllipsisH />;
  };

  const formatDate = (dateString) => {
    const options = { year: "numeric", month: "long", day: "numeric" };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  const openModal = (expense) => {
    setIsModalOpen(true);
    setCurrExpense(expense);
  };
  

  const handleDelete = (id) => {
    const updatedExpenses = data.filter((expense) => expense.id !== id);
    handleExpenseListUpdate(updatedExpenses);
  };

  const editExpense = (e) => {
    e.preventDefault();

    // Find the index of the expense you're updating
    const expenseIndex = data.findIndex(
      (expense) => expense.id === currExpense.id
    );

    // Make a copy of the current expenses array
    const updatedExpenses = [...data];

    // Update the expense at the found index with the new details
    if (expenseIndex !== -1) {
      updatedExpenses[expenseIndex] = {
        ...updatedExpenses[expenseIndex],
        ...currExpense,
      };

      // Update the expenses list with the edited expense
      handleExpenseListUpdate(updatedExpenses);
      setIsModalOpen(false);
    } else {
      console.log("Expense not found");
    }
  };

  return (
    <>
      <div className="expense-container">
        <h2>Recent Transactions & Top Expenses</h2>
        <br />
        <div className="expense-table-container">
          {currentItems.map((item, index) => (
            <div className="expense-row" key={index}>
              <div className="expense-row-icon-title">
                <div className="expense-icon">
                  {React.cloneElement(getCategoryIcon(item.category), {
                    className: "expense-category-icon",
                  })}
                </div>
                <div className="expense-title-date">
                  <div className="expense-title">{item.title}</div>
                  <div className="expense-date">{formatDate(item.date)}</div>
                </div>
              </div>
              <div className="expense-price-edit-delete-container">
                <div className="expense-price">
                  â‚¹{parseInt(item.price, 10).toLocaleString()}
                </div>
                <button
                  className="action-btn edit-btn"
                  onClick={() => openModal(item)}
                >
                  <FaEdit />
                </button>
                <button
                  className="action-btn delete-btn"
                  onClick={() => handleDelete(item.id)}
                >
                  <FaTrash />
                </button>
              </div>
            </div>
          ))}
          <div className="pagination">
            <button onClick={prevPage} disabled={currentPage === 1}>
              &laquo;
            </button>
            {getPageNumbers().map((number) => (
              <button
                key={number}
                onClick={() => paginate(number)}
                className={currentPage === number ? "active" : ""}
              >
                {number}
              </button>
            ))}
            <button onClick={nextPage} disabled={currentPage === pageCount}>
              &raquo;
            </button>
          </div>
        </div>
      </div>
      <Modal
        isOpen={isModalOpen}
        onRequestClose={() => setIsModalOpen(false)}
        style={modalStyle}
        contentLabel="Edit Expense"
      >
        <h2 className="modal-header">Edit Expense</h2>
        <form className="modal-form-expense" onSubmit={editExpense}>
          <input
            name="title"
            placeholder="Title"
            value={currExpense.title}
            onChange={handleInputChange}
            requireds
          />

          <input
            name="price"
            placeholder="Price"
            type="number"
            value={currExpense.price}
            onChange={handleInputChange}
            required
          />
          <select
            className="select-option"
            name="category"
            value={currExpense.category}
            onChange={handleInputChange}
            required
          >
            <option value="">Select Category</option>{" "}
            {/* Default empty option */}
            {categories.map((category, index) => (
              <option key={index} value={category}>
                {category}
              </option>
            ))}
          </select>
          <input
            name="date"
            placeholder="Date"
            type="date"
            value={currExpense.date}
            onChange={handleInputChange}
            required
          />
          <div>
            <button className="glassmorphismButton" type="submit">
              Save
            </button>
            <button
              className="glassmorphismButton"
              type="button"
              onClick={() => setIsModalOpen(false)}
            >
              Cancel
            </button>
          </div>
        </form>
      </Modal>
    </>
  );
};

export default TableWithPagination;
.expense-container {
    width: 50%;
    display: flex;
    flex-direction: column;
  }
  
  .expense-table-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .expense-row {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .expense-row:last-child {
    border-bottom: none;
  }
  
  .expense-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px; /* Adjust size as necessary */
    height: 40px; /* Adjust size as necessary */
    border-radius: 20px; /* Adjust for round shape */
    background-color: #f0f0f0; /* Icon background color */
    margin-right: 10px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .expense-row-icon-title {
    display: flex;
  }
  
  .expense-title-date {
    display: flex;
    flex-direction: column;
  }
  .expense-category-icon {
    font-size: 24px; /* Increase the size as needed */
    color: #555; /* Or any color that provides good contrast */
  }
  
  .expense-icon i {
    color: #333333; /* Icon color */
  }
  
  .expense-title {
    flex: 1;
    margin-right: 10px; /* Space between title and date */
    font-size: 16px;
    color: #333;
    font-weight: bold;
  }
  
  .expense-date {
    color: #666;
    margin-right: 10px; /* Space between date and price */
  }
  
  .expense-price {
    color: #e63e3e;
    font-weight: bold;
    font-size: 20px;
  }
  
  .pagination {
    display: flex;
    justify-content: center;
    padding: 20px 0;
  }
  .pagination button {
    color: #009879;
    padding: 5px 10px;
    margin: 0 5px;
    border-radius: 5px;
    border: 1px solid #009879;
    background: none;
    cursor: pointer;
  }
  
  .pagination button:hover,
  .pagination button.active {
    background-color: #009879;
    color: white;
  }
  
  .pagination button[disabled] {
    cursor: not-allowed;
    opacity: 0.5;
  }
  
  .fas {
    margin-right: 10px; /* space after the icon */
  }
  
  .pagination {
    display: flex;
    justify-content: center;
    padding: 20px;
    margin: 0 auto;
  }
  
  .pagination button {
    border: 1px solid #ddd;
    padding: 5px 10px;
    margin: 0 5px;
    cursor: pointer;
    background-color: #f4f4f4;
  }
  
  .pagination button:hover {
    background-color: #ddd;
  }
  
  .pagination button:disabled {
    color: #cccccc;
    cursor: not-allowed;
  }
  
  .pagination button.active {
    background-color: #009879;
    color: white;
  }
  
  .expense-actions {
    display: flex;
    align-items: center;
  }
  
  .expense-price {
    margin-right: 20px;
    font-weight: bold;
  }
  
  .action-btn {
    border: none;
    cursor: pointer;
    background-color: transparent;
    margin-left: 10px;
  }
  
  .edit-btn {
    color: #4caf50; /* Green */
  }
  
  .delete-btn {
    color: #f44336; /* Red */
  }
  
  .action-btn:hover {
    opacity: 0.7;
  }
  
  .glassmorphism {
    background: rgba(255, 255, 255, 0.2); /* Adjust the alpha value for opacity */
    border-radius: 10px; /* Rounded corners */
    border: 1px solid rgba(255, 255, 255, 0.18); /* Subtle white border */
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
    backdrop-filter: blur(10px); /* Blur the background behind the element */
  }
  
  .glassmorphismButton,
  input,
  select,
  select > option {
    background: rgba(255, 255, 255, 0.2); /* Adjust the alpha value for opacity */
    border-radius: 10px; /* Rounded corners */
    border: 1px solid rgba(255, 255, 255, 0.18); /* Subtle white border */
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
    backdrop-filter: blur(10px); /* Blur the background behind the element */
    margin: 10px;
    padding: 15px;
    font-weight: bold;
  }
  
  .modal-header {
    margin: 0 auto;
    color: rgb(20, 20, 20);
  }
  
  .modal-form-income {
    display: flex;
    padding: 10px;
  }
  
  .expense-price-edit-delete-container {
    display: flex;
  }
  
  button:hover {
    cursor: pointer;
  }
  


  import React from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import "./LineBarChart.css";

const processData = (data) => {
  // Sum expenses by category
  const categoryTotals = data.reduce((acc, item) => {
    const amount = Number(item.price) || 0;
    acc[item.category] = acc[item.category] || {
      category: item.category,
      total: 0,
    };
    acc[item.category].total += amount;
    return acc;
  }, {});

  // Sort categories by total expense and convert to array for the chart
  return Object.values(categoryTotals)
    .sort((a, b) => b.total - a.total)
    .map((cat) => ({ name: cat.category, value: cat.total }));
};

const LineBarChart = ({ data }) => {
  const processedData = processData(data);

  return (
    <div className="line-bar-chart">
      <ResponsiveContainer width="100%" height={400}>
        <BarChart
          data={processedData}
          layout="vertical"
          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
        >
          <XAxis type="number" hide />
          <YAxis
            dataKey="name"
            type="category"
            tickLine={false}
            axisLine={false}
          />
          <Tooltip cursor={{ fill: "transparent" }} />
          <Bar
            dataKey="value"
            barSize={20}
            radius={[0, 10, 10, 0]}
            fill="#8884d8"
          />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default LineBarChart;
.line-bar-chart {
    font-family: "Arial", sans-serif;
    background-color: #fff;
    width: 40%;
    margin-top: -50px;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
    margin: auto;
    overflow: hidden; /* Ensure the shadows of the bars don't spill out */
  }
  
  .recharts-cartesian-axis-tick {
    font-size: 14px;
    fill: #333;
  }
  
  .recharts-bar-rectangle {
    transition: fill 250ms ease-in-out;
  }
  
  .recharts-tooltip-wrapper {
    outline: none;
  }
  
  .recharts-tooltip-wrapper .recharts-default-tooltip {
    border-radius: 10px;
    border: none;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
  
  .recharts-default-tooltip {
    background-color: #fff !important;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
  }
  
  /* Adjust tick and tooltip styles as necessary */
  



  import React from "react";
import { PieChart, Pie, Cell, Tooltip, Legend } from "recharts";
import "./RoundChart.css";

// Assuming your data prop looks like the array you've given
const processDataForPieChart = (data) => {
  const categories = {};

  data.forEach((item) => {
    if (categories[item.category]) {
      categories[item.category] += parseInt(item.price, 10);
    } else {
      categories[item.category] = parseInt(item.price, 10);
    }
  });

  return Object.keys(categories).map((category) => ({
    name: category,
    value: categories[category],
  }));
};

const RoundChart = ({ data }) => {
  const processedData = processDataForPieChart(data);
  const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#AF19FF"];
  // const COLORS = ["#fff"];

  return (
    <PieChart className="chart " width={400} height={400}>
      <Pie
        data={processedData}
        cx="50%"
        cy="50%"
        outerRadius={150}
        fill="#8884d8"
        dataKey="value"
        isAnimationActive={true}
      >
        {processedData.map((entry, index) => (
          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
        ))}
      </Pie>
      <Tooltip />
      <Legend className="chart-legend" />
    </PieChart>
  );
};

export default RoundChart;
.glassmorphism {
    background: rgba(255, 255, 255, 0.2); /* Adjust the alpha value for opacity */
    border-radius: 10px; /* Rounded corners */
    border: 1px solid rgba(255, 255, 255, 0.18); /* Subtle white border */
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
    backdrop-filter: blur(10px); /* Blur the background behind the element */
  }
  
  .chart-legend {
    font-weight: bold;
    font-family: cursive;
  }
  


  import React, { useState, useEffect } from "react";
import Modal from "react-modal";
import "./WalletExpenses.css";
import RoundChart from "../RoundChart/RoundChart";
import { v4 as uuidv4 } from "uuid";

// Ensure the modal is bound to your appElement for accessibility reasons
Modal.setAppElement("#root");

const WalletExpensesComponent = ({
  handleExpenseListUpdate,
  categories,
  expenses,
  setExpenses,
  getTotalExpenses,
  walletBalance,
  setWalletBalance,
}) => {
  const [isExpenseModalOpen, setIsExpenseModalOpen] = useState(false);
  const [isIncomeModalOpen, setIsIncomeModalOpen] = useState(false);
  const [newExpense, setNewExpense] = useState({
    id: null,
    title: "",
    price: "",
    category: "",
    date: "",
  });
  const [newIncome, setNewIncome] = useState("");

  const handleInputChange = (e, isExpense = true) => {
    const { name, value } = e.target;
    if (isExpense) {
      setNewExpense((prevState) => ({ ...prevState, [name]: value }));
    } else {
      setNewIncome(value);
    }
  };

  const addExpense = (e) => {
    e.preventDefault();
    if (walletBalance < newExpense.price) {
      return alert("Couldn't add expense, insufficient wallet balance.");
    }
    newExpense.id = uuidv4();

    const updatedBalance = walletBalance - newExpense.price;
    setWalletBalance(updatedBalance);
    localStorage.setItem("walletBalance", JSON.stringify(updatedBalance));
    localStorage.setItem("expenses", JSON.stringify([...expenses, newExpense]));

    setExpenses((prevExpenses) => [...prevExpenses, newExpense]);
    setIsExpenseModalOpen(false);
    setNewExpense({
      id: null,
      title: "",
      price: "",
      category: "",
      date: "",
    }); // Reset form
  };

  const addIncome = (e) => {
    e.preventDefault();
    if (!isNaN(newIncome) && newIncome.trim() !== "") {
      setWalletBalance((prevBalance) => prevBalance + parseInt(newIncome, 10));
      localStorage.setItem(
        "totalBalance",
        JSON.stringify(walletBalance + parseInt(newIncome, 10))
      );
      setIsIncomeModalOpen(false);
      setNewIncome(""); // Reset form
    }
  };

  useEffect(() => {
    handleExpenseListUpdate(expenses);
  }, [expenses]);

  //By default add totalBalance as 5000
  useEffect(() => {
    if (!localStorage.getItem("totalBalance"))
      localStorage.setItem("totalBalance", JSON.stringify(5000));
  }, []);

  const modalStyle = {
    content: {
      top: "50%",
      left: "50%",
      right: "auto",
      bottom: "auto",
      marginRight: "-50%",
      transform: "translate(-50%, -50%)",
      width: "80%",
      maxWidth: "500px",
      background: "rgba(255, 255, 255, 0.6)",
      borderRadius: "10px",
      border: "border: 1px solid rgba(255, 255, 255, 0.18)",
      boxShadow: " 0 8px 12px rgba(0, 0, 0, 0.1)",
      backdropFilter: "blur(10px)",
    },
  };

  return (
    <div className="wallet-container glassmorphism">
      <div className="wallet-income-expense-container">
        <div className="wallet-card-container glassmorphism">
          <h2>
            Wallet Balance:{" "}
            <span className="income-amount"> â‚¹{walletBalance} </span>
          </h2>
          <button
            className="glassmorphism"
            onClick={() => setIsIncomeModalOpen(true)}
          >
            + Add Income
          </button>
        </div>
        <div className="wallet-card-container glassmorphism">
          <h2>
            Expenses:
            <span className="expense-amount"> â‚¹{getTotalExpenses()} </span>
          </h2>
          <button
            className="glassmorphism"
            onClick={() => setIsExpenseModalOpen(true)}
          >
            + Add Expense
          </button>
        </div>
      </div>
      <RoundChart data={expenses} />

      {/* Modal for adding income */}
      <Modal
        isOpen={isIncomeModalOpen}
        onRequestClose={() => setIsIncomeModalOpen(false)}
        style={modalStyle}
        contentLabel="Add New Income"
      >
        <h2 className="modal-header">Add New Income</h2>
        <form className="modal-form-income" onSubmit={addIncome}>
          <input
            className="glassmorphismButton"
            name="income"
            placeholder="Income amount"
            type="number"
            value={newIncome}
            onChange={(e) => handleInputChange(e, false)}
            required
          />
          <div>
            <button className="glassmorphismButton" type="submit">
              Add Income
            </button>
            <button
              className="glassmorphismButton"
              type="button"
              onClick={() => setIsIncomeModalOpen(false)}
            >
              Cancel
            </button>
          </div>
        </form>
      </Modal>

      {/* Modal for adding expenses */}
      <Modal
        isOpen={isExpenseModalOpen}
        onRequestClose={() => setIsExpenseModalOpen(false)}
        style={modalStyle}
        contentLabel="Add New Expense"
      >
        <h2 className="modal-header">Add New Expense</h2>
        <form className="modal-form-expense" onSubmit={addExpense}>
          <input
            name="title"
            placeholder="Title"
            value={newExpense.title}
            onChange={handleInputChange}
            requireds
          />

          <input
            name="price"
            placeholder="Price"
            type="number"
            value={newExpense.price}
            onChange={handleInputChange}
            required
          />
          <select
            className="select-option"
            name="category"
            value={newExpense.category}
            onChange={handleInputChange}
            required
          >
            <option value="">Select Category</option>{" "}
            {/* Default empty option */}
            {categories.map((category, index) => (
              <option key={index} value={category}>
                {category}
              </option>
            ))}
          </select>
          <input
            name="date"
            placeholder="Date"
            type="date"
            value={newExpense.date}
            onChange={handleInputChange}
            required
          />
          <div>
            <button className="glassmorphismButton" type="submit">
              Add Expense
            </button>
            <button
              className="glassmorphismButton"
              type="button"
              onClick={() => setIsExpenseModalOpen(false)}
            >
              Cancel
            </button>
          </div>
        </form>
      </Modal>
    </div>
  );
};

export default WalletExpensesComponent;
.wallet-container {
    height: fit-content;
    margin: 40px;
    padding: 20px; /* Adjust as needed */
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
  }
  
  .glassmorphism {
    background: rgba(255, 255, 255, 0.2); /* Adjust the alpha value for opacity */
    border-radius: 10px; /* Rounded corners */
    border: 1px solid rgba(255, 255, 255, 0.18); /* Subtle white border */
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
    backdrop-filter: blur(10px); /* Blur the background behind the element */
  }
  
  .glassmorphismButton,
  input,
  select,
  select > option {
    background: rgba(255, 255, 255, 0.2); /* Adjust the alpha value for opacity */
    border-radius: 10px; /* Rounded corners */
    border: 1px solid rgba(255, 255, 255, 0.18); /* Subtle white border */
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
    backdrop-filter: blur(10px); /* Blur the background behind the element */
    margin: 10px;
    padding: 15px;
    font-weight: bold;
  }
  
  .wallet-card-container {
    margin: 40px;
    padding: 20px;
    min-width: 300px;
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    align-items: space-between;
    justify-content: space-between;
  }
  
  .wallet-income-expense-container {
    width: 50%;
    display: flex;
  }
  
  .wallet-card-container > button {
    width: 60%;
    margin: 10px auto;
    height: 50px;
    cursor: pointer;
  }
  
  .income-amount {
    color: green;
  }
  
  .expense-amount {
    color: red;
  }
  
  .modal-header {
    margin: 0 auto;
  }
  
  .modal-form-income {
    display: flex;
    padding: 10px;
  }
  
  .select-option > option {
    padding: 5px;
  }
  


  import React from "react";
import Dashboard from "./components/Dashboard/Dashboard";

function App() {
  return <Dashboard />;
}

export default App;
